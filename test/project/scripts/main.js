var k=Object.defineProperty;var w=s=>{throw TypeError(s)};var m=(s,t,e)=>t in s?k(s,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[t]=e;var d=(s,t,e)=>m(s,typeof t!="symbol"?t+"":t,e),c=(s,t,e)=>t.has(s)||w("Cannot "+e);var r=(s,t,e)=>(c(s,t,"read from private field"),e?e.call(s):t.get(s)),h=(s,t,e)=>t.has(s)?w("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(s):t.set(s,e),g=(s,t,e,n)=>(c(s,t,"write to private field"),n?n.call(s,e):t.set(s,e),e),L=(s,t,e)=>(c(s,t,"access private method"),e);var o,i,u=class{constructor(t){h(this,o);h(this,i,new Map);g(this,o,t)}on(t,e){r(this,o).addEventListener(t,e);let n=r(this,i).get(t);return n||(r(this,i).set(t,new Set([e])),n=r(this,i).get(t)),n.add(e),()=>{r(this,o).removeEventListener(t,e),n.delete(e),n.size===0&&r(this,i).delete(t)}}release(){for(let[t,e]of r(this,i))for(let n of e)r(this,o).removeEventListener(t,n)}};o=new WeakMap,i=new WeakMap;var a,y,l=class extends u{constructor(e){super(e);h(this,a);d(this,"runtime");d(this,"tickHandlers",new Set);this.runtime=e,this.on("beforeprojectstart",()=>this.beforeStart()),this.on("afterprojectstart",()=>this.onStart()),this.on("tick",()=>L(this,a,y).call(this))}onTick(e){return this.tickHandlers.add(e),()=>{this.tickHandlers.delete(e)}}addInstances(e){for(let[n,v]of Object.entries(e))this.runtime.objects[n].setInstanceClass(v)}addPromises(e){for(let n of e)this.runtime.sdk.addLoadPromise(n)}};a=new WeakSet,y=function(){for(let e of this.tickHandlers)e()};var f=class{lerp(t,e,n){return t+(e-t)*n}global(t,e){globalThis[t]=e}};new f;var p=class extends l{beforeStart(){this.on("tick",()=>this.tick())}onStart(){}tick(){}},b;runOnStartup(s=>{b=new p(s)});export{b as app};
//# sourceMappingURL=data:application/json;base64,
